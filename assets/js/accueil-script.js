/********************************************** TITRE EN ANIMATION DYNAMIQUE *********************************************************************************************************/

// D√©claration de la fonction init ()
function init() {
  // Attente d'1 seconde sans texte puis inscription d'une premi√®re ligne texte qui d√©marre et reste fixe, ensuite la fonction en boucle (typeLoop) intervient. 
  wait(1000).then(() => {
    clearText()
    // On inclut la fonction typeText qui sert √† ajouter des caract√®res (voir plus bas)
    typeText('Site Internet d\'Antheuil Portes : \n').then(typeLoop)
  })
  // Une seconde ligne de texte (typeText) est cr√©√©e et se poursuit en boucle (typeLoop). Cette ligne se cr√©√©e et se retire au bout de 2 secondes. De plus le texte peut √™tre chang√© gr√¢ce √† un autre typeText
  function typeLoop() {
    typeText('Petit village de 400 habitants')
      .then(() => wait(2000))
      .then(() => removeText('Petit village de 400 habitants'))
      .then(() => typeText('Pr√®s de Compi√®gne dans l\'Oise'))
      .then(() => wait(2000))
      .then(() => removeText('Pr√®s de Compi√®gne dans l\'Oise'))
      .then(() => typeText('Communaut√© de communes du Pays des Sources'))
      .then(() => wait(2000))
      .then(() => removeText('Communaut√© de communes du Pays des Sources'))
      .then(typeLoop)
  }

}


// Source code üö©

const elementNode = document.getElementById('type-text')
// 'type-text' = id de la balise <span> qui contient des √©l√©ments inline donc qui occupe juste la place de la balise (√† la diff√©rence des div qui sont en bloc)
// D√©claration d'un variable qui contiendra les diff√©rents textes
let text = ''

// D√©laration d'une fonction qui va mettre √† jour la balise <span> avce du texte
function updateNode() {
  elementNode.innerText = text
}

// D√©claration d'une fonction qui va ajouter un caract√®re √† la fois pour cr√©er une phrase et mise √† jour de la balise <span> avec la fonction updateNode
function pushCharacter(character) {
  text += character
  updateNode()
}

// D√©claration d'une fonction qui va retirer (ou trancher) un caract√®re √† la fois pour supprimer une phrase et mise √† jour de la balise <span> avec la fonction updateNode
function popCharacter() {
  text = text.slice(0, text.length - 1)
  updateNode()
}

// D√©claration d'une fonction qui n'affiche pas de texte mise √† jour de la balise <span> avec la fonction updateNode
function clearText() {
  text = ''
  updateNode()
}

function wait(time) {
  if (time === undefined) {
    const randomMsInterval = 100 * Math.random()
    time = randomMsInterval < 50 ? 10 : randomMsInterval
  }
  //  Promise est un object javascript qui est r√©solu avec la valeur donn√©e. Si cette valeur est une promesse, la promesse est renvoy√©e, si la valeur poss√®de une m√©thode then, la promesse renvoy√©e ¬´ suivra ¬ª cette m√©thode et prendra son √©tat ; sinon, la promesse renvoy√©e sera tenue avec la valeur. 
  return new Promise(resolve => {
    setTimeout(() => {
      requestAnimationFrame(resolve)
    }, time)
  })
}
// Fonction qui permet d'ajouter des caract√®res puis attend et ensuite envoie vers la fonction removeCharacter 
function typeCharacter(character) {
  return new Promise(resolve => {
    pushCharacter(character)
    wait().then(resolve)
  })
}
// Fonction qui permet de supprimer des caract√®res puis attend et ensuite envoie vers la fonction typeCharacter 
function removeCharacter() {
  return new Promise(resolve => {
    popCharacter()
    wait().then(resolve)
  })
}
// Fonction pour ajouter des caract√®res
function typeText(text) {
  return new Promise(resolve => {

    function type([character, ...text]) {
      typeCharacter(character)
        .then(() => {
          if (text.length) type(text)
          else resolve()
        })
    }

    type(text)
  })
}
// Fonction pour supprimer des caract√®res
function removeText({ length: amount }) {
  return new Promise(resolve => {

    function remove(count) {
      removeCharacter()
        .then(() => {
          if (count > 1) remove(count - 1)
          else resolve()
        })
    }

    remove(amount)
  })
}

// D√©claration de la fonction compl√®te incluant toutes les autres fonctions vues pr√©c√©demment
init()

/********************************************** FIN TITRE EN ANIMATION DYNAMIQUE *****************************************************************************************/


